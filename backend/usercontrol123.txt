const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const Credentials = require("../models/Credentials");
const User = require("../models/User");
// ✅ Get all users (Admin-only)
 const getAllUsers = async (req, res) => {
  try {
    const users = await User.find().populate("credentialId", "username role");
    res.json(users);
  } catch (error) {
    res.status(500).json({ message: "Server error", error });
  }
};
// ✅ Get a single user by ID
const getUserById = async (req, res) => {
  try {
    const user = await User.findById(req.params.id).populate(
      "credentialId",
      "username role"
    );
    if (!user) return res.status(404).json({ message: "User not found" });

    res.json(user);
  } catch (error) {
    res.status(500).json({ message: "Server error", error });
  }
};
// ✅ Create a new user (Admin use case)
const createUser = async (req, res) => {
  try {
    const { username, password, role, name, email } = req.body;

    // Validate required fields
    if (!username || !password || !role || !name || !email) {
      return res.status(400).json({ 
        message: "Required fields missing", 
        required: ["username", "password", "role", "name", "email"] 
      });
    }
    // Check if email already exists
    const existingUser = await User.findOne({ email });
    if (existingUser)
      return res.status(400).json({ message: "Email already registered" });
    // Hash password
    const hashedPassword = await bcrypt.hash(password, 10);
    // Create credentials first
    const credential = new Credentials({
      username,
      password: hashedPassword,
      role,
    });
    await credential.save();
    // Create User with only essential fields
    const user = new User({
      credentialId: credential._id,
      name,
      email,
      // Set default empty values for optional fields
      contact_number: "",
      address: "",
      skills: [],
      preferences: {},
      profile_picture: null
    });
    await user.save();
    res.status(201).json({ 
      message: "User created successfully. User can login to complete their profile.", 
      user 
    });
  } catch (error) {
    console.error('Error creating user:', error);
    res.status(500).json({ message: "Error creating user", error: error.message });
  }
};
// ✅ Login User
const loginUser = async (req, res) => {
  try {
    const { username, password } = req.body;
    // Find credentials using username
    const credentials = await Credentials.findOne({ username });
    if (!credentials) {
      return res
        .status(400)
        .json({ message: "Invalid credentials (username not found)" });
    }
    // Verify password
    const isMatch = await bcrypt.compare(password, credentials.password);
    if (!isMatch) {
      return res
        .status(400)
        .json({ message: "Invalid credentials (password mismatch)" });
    }
    // Check if user is active
    const user = await User.findOne({ credentialId: credentials._id });
    if (!user || user.status === 'inactive') {
      return res
        .status(403)
        .json({ message: "Account is inactive. Please contact administrator." });
    }
    // Generate JWT token
    const token = jwt.sign(
      { credentialId: credentials._id, role: credentials.role },
      process.env.JWT_SECRET,
      { expiresIn: "1h" }
    );
    res.json({ token, message: "Login successful" });
  } catch (error) {
    res.status(500).json({ message: "Server error", error });
  }
};
// ✅ Update user details (PATCH)
const updateUser = async (req, res) => {
  try {
    const { 
      name, 
      email, 
      contact_number, 
      address, 
      skills, 
      profile_picture,
      preferences: { languages } = {} 
    } = req.body;

    // Find the user by ID
    const user = await User.findById(req.params.id);
    if (!user) return res.status(404).json({ message: "User not found" });

    // Update only the fields that are provided
    if (name) user.name = name;
    if (email) {
      // Check if new email already exists for other users
      const existingUser = await User.findOne({ email, _id: { $ne: user._id } });
      if (existingUser) {
        return res.status(400).json({ message: "Email already in use" });
      }
      user.email = email;
    }
    if (contact_number) user.contact_number = contact_number;
    if (address) user.address = address;
    if (skills) user.skills = skills;
    if (profile_picture) {
      user.profile_picture = {
        url: profile_picture.url,
        upload_date: new Date()
      };
    }
    if (languages) {
      user.preferences = {
        ...user.preferences,
        languages
      };
    }

    await user.save();
    res.json({ 
      message: "User updated successfully", 
      user 
    });
  } catch (error) {
    console.error('Error updating user:', error);
    res.status(500).json({ message: "Server error", error: error.message });
  }
};
// ✅ Deactivate user (Admin-only) - Replaces the deleteUser function
const deactivateUser = async (req, res) => {
  try {
    const user = await User.findById(req.params.id);
    if (!user) return res.status(404).json({ message: "User not found" });

    // Update user status to inactive instead of deleting
    user.status = 'inactive';
    await user.save();

    res.json({ message: "User deactivated successfully" });
  } catch (error) {
    console.error('Error deactivating user:', error);
    res.status(500).json({ message: "Server error", error: error.message });
  }
};
// ✅ Reactivate user (Admin-only)
const reactivateUser = async (req, res) => {
  try {
    const user = await User.findById(req.params.id);
    if (!user) return res.status(404).json({ message: "User not found" });

    // Update user status to active
    user.status = 'active';
    await user.save();
    res.json({ message: "User reactivated successfully" });
  } catch (error) {
    console.error('Error reactivating user:', error);
    res.status(500).json({ message: "Server error", error: error.message });
  }
};
module.exports = {
  getAllUsers,
  getUserById,
  createUser,
  loginUser,
  updateUser,
  deactivateUser,
  reactivateUser,
  // deleteUser, // Remove or comment out this line
};